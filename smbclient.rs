/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy)]
pub struct Struct_smbc_dirent {
    pub smbc_type: ::libc::c_uint,
    pub dirlen: ::libc::c_uint,
    pub commentlen: ::libc::c_uint,
    pub comment: *mut ::libc::c_char,
    pub namelen: ::libc::c_uint,
    pub name: [::libc::c_char; 1usize],
}
impl ::std::clone::Clone for Struct_smbc_dirent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_smbc_dirent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_smbc_share_mode = ::libc::c_uint;
pub const SMBC_SHAREMODE_DENY_DOS: ::libc::c_uint = 0;
pub const SMBC_SHAREMODE_DENY_ALL: ::libc::c_uint = 1;
pub const SMBC_SHAREMODE_DENY_WRITE: ::libc::c_uint = 2;
pub const SMBC_SHAREMODE_DENY_READ: ::libc::c_uint = 3;
pub const SMBC_SHAREMODE_DENY_NONE: ::libc::c_uint = 4;
pub const SMBC_SHAREMODE_DENY_FCB: ::libc::c_uint = 7;
pub type smbc_share_mode = Enum_smbc_share_mode;
pub type Enum_smbc_smb_encrypt_level = ::libc::c_uint;
pub const SMBC_ENCRYPTLEVEL_NONE: ::libc::c_uint = 0;
pub const SMBC_ENCRYPTLEVEL_REQUEST: ::libc::c_uint = 1;
pub const SMBC_ENCRYPTLEVEL_REQUIRE: ::libc::c_uint = 2;
pub type smbc_smb_encrypt_level = Enum_smbc_smb_encrypt_level;
pub type Enum_smbc_vfs_feature = ::libc::c_uint;
pub const SMBC_VFS_FEATURE_RDONLY: ::libc::c_uint = 1;
pub const SMBC_VFS_FEATURE_DFS: ::libc::c_uint = 268435456;
pub const SMBC_VFS_FEATURE_CASE_INSENSITIVE: ::libc::c_uint = 536870912;
pub const SMBC_VFS_FEATURE_NO_UNIXCIFS: ::libc::c_uint = 1073741824;
pub type smbc_vfs_feature = Enum_smbc_vfs_feature;
pub type smbc_bool = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_print_job_info {
    pub id: ::libc::c_ushort,
    pub priority: ::libc::c_ushort,
    pub size: size_t,
    pub user: [::libc::c_char; 128usize],
    pub name: [::libc::c_char; 128usize],
    pub t: time_t,
}
impl ::std::clone::Clone for Struct_print_job_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_print_job_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__SMBCSRV { }
pub type SMBCSRV = Struct__SMBCSRV;
pub enum Struct__SMBCFILE { }
pub type SMBCFILE = Struct__SMBCFILE;
pub type SMBCCTX = Struct__SMBCCTX;
pub type smbc_get_auth_data_fn =
    ::std::option::Option<extern "C" fn(srv: *const ::libc::c_char,
                                        shr: *const ::libc::c_char,
                                        wg: *mut ::libc::c_char,
                                        wglen: ::libc::c_int,
                                        un: *mut ::libc::c_char,
                                        unlen: ::libc::c_int,
                                        pw: *mut ::libc::c_char,
                                        pwlen: ::libc::c_int) -> ()>;
pub type smbc_get_auth_data_with_context_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        srv: *const ::libc::c_char,
                                        shr: *const ::libc::c_char,
                                        wg: *mut ::libc::c_char,
                                        wglen: ::libc::c_int,
                                        un: *mut ::libc::c_char,
                                        unlen: ::libc::c_int,
                                        pw: *mut ::libc::c_char,
                                        pwlen: ::libc::c_int) -> ()>;
pub type smbc_list_print_job_fn =
    ::std::option::Option<extern "C" fn(i: *mut Struct_print_job_info) -> ()>;
pub type smbc_check_server_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, srv: *mut SMBCSRV)
                              -> ::libc::c_int>;
pub type smbc_remove_unused_server_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, srv: *mut SMBCSRV)
                              -> ::libc::c_int>;
pub type smbc_add_cached_srv_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, srv: *mut SMBCSRV,
                                        server: *const ::libc::c_char,
                                        share: *const ::libc::c_char,
                                        workgroup: *const ::libc::c_char,
                                        username: *const ::libc::c_char)
                              -> ::libc::c_int>;
pub type smbc_get_cached_srv_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        server: *const ::libc::c_char,
                                        share: *const ::libc::c_char,
                                        workgroup: *const ::libc::c_char,
                                        username: *const ::libc::c_char)
                              -> *mut SMBCSRV>;
pub type smbc_remove_cached_srv_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, srv: *mut SMBCSRV)
                              -> ::libc::c_int>;
pub type smbc_purge_cached_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX) -> ::libc::c_int>;
pub enum Struct_smbc_server_cache { }
pub type smbc_open_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        flags: ::libc::c_int, mode: mode_t)
                              -> *mut SMBCFILE>;
pub type smbc_creat_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        path: *const ::libc::c_char,
                                        mode: mode_t) -> *mut SMBCFILE>;
pub type smbc_read_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, file: *mut SMBCFILE,
                                        buf: *mut ::libc::c_void,
                                        count: size_t) -> ssize_t>;
pub type smbc_write_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, file: *mut SMBCFILE,
                                        buf: *const ::libc::c_void,
                                        count: size_t) -> ssize_t>;
pub type smbc_unlink_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        fname: *const ::libc::c_char)
                              -> ::libc::c_int>;
pub type smbc_rename_fn =
    ::std::option::Option<extern "C" fn(ocontext: *mut SMBCCTX,
                                        oname: *const ::libc::c_char,
                                        ncontext: *mut SMBCCTX,
                                        nname: *const ::libc::c_char)
                              -> ::libc::c_int>;
pub type smbc_lseek_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, file: *mut SMBCFILE,
                                        offset: off_t, whence: ::libc::c_int)
                              -> off_t>;
pub type smbc_stat_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        st: *mut Struct_stat)
                              -> ::libc::c_int>;
pub type smbc_fstat_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, file: *mut SMBCFILE,
                                        st: *mut Struct_stat)
                              -> ::libc::c_int>;
pub type smbc_statvfs_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        path: *mut ::libc::c_char,
                                        st: *mut Struct_statvfs)
                              -> ::libc::c_int>;
pub type smbc_fstatvfs_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, file: *mut SMBCFILE,
                                        st: *mut Struct_statvfs)
                              -> ::libc::c_int>;
pub type smbc_ftruncate_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, f: *mut SMBCFILE,
                                        size: off_t) -> ::libc::c_int>;
pub type smbc_close_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, file: *mut SMBCFILE)
                              -> ::libc::c_int>;
pub type smbc_opendir_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        fname: *const ::libc::c_char)
                              -> *mut SMBCFILE>;
pub type smbc_closedir_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, dir: *mut SMBCFILE)
                              -> ::libc::c_int>;
pub type smbc_readdir_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, dir: *mut SMBCFILE)
                              -> *mut Struct_smbc_dirent>;
pub type smbc_getdents_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, dir: *mut SMBCFILE,
                                        dirp: *mut Struct_smbc_dirent,
                                        count: ::libc::c_int)
                              -> ::libc::c_int>;
pub type smbc_mkdir_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        mode: mode_t) -> ::libc::c_int>;
pub type smbc_rmdir_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        fname: *const ::libc::c_char)
                              -> ::libc::c_int>;
pub type smbc_telldir_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, dir: *mut SMBCFILE)
                              -> off_t>;
pub type smbc_lseekdir_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, dir: *mut SMBCFILE,
                                        offset: off_t) -> ::libc::c_int>;
pub type smbc_fstatdir_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX, dir: *mut SMBCFILE,
                                        st: *mut Struct_stat)
                              -> ::libc::c_int>;
pub type smbc_chmod_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        mode: mode_t) -> ::libc::c_int>;
pub type smbc_utimes_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        tbuf: *mut Struct_timeval)
                              -> ::libc::c_int>;
pub type smbc_setxattr_fn =
    ::std::option::Option<extern "C" fn(context: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        name: *const ::libc::c_char,
                                        value: *const ::libc::c_void,
                                        size: size_t, flags: ::libc::c_int)
                              -> ::libc::c_int>;
pub type smbc_getxattr_fn =
    ::std::option::Option<extern "C" fn(context: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        name: *const ::libc::c_char,
                                        value: *const ::libc::c_void,
                                        size: size_t) -> ::libc::c_int>;
pub type smbc_removexattr_fn =
    ::std::option::Option<extern "C" fn(context: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        name: *const ::libc::c_char)
                              -> ::libc::c_int>;
pub type smbc_listxattr_fn =
    ::std::option::Option<extern "C" fn(context: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        list: *mut ::libc::c_char,
                                        size: size_t) -> ::libc::c_int>;
pub type smbc_print_file_fn =
    ::std::option::Option<extern "C" fn(c_file: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        c_print: *mut SMBCCTX,
                                        printq: *const ::libc::c_char)
                              -> ::libc::c_int>;
pub type smbc_open_print_job_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        fname: *const ::libc::c_char)
                              -> *mut SMBCFILE>;
pub type smbc_list_print_jobs_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        _fn: smbc_list_print_job_fn)
                              -> ::libc::c_int>;
pub type smbc_unlink_print_job_fn =
    ::std::option::Option<extern "C" fn(c: *mut SMBCCTX,
                                        fname: *const ::libc::c_char,
                                        id: ::libc::c_int) -> ::libc::c_int>;
pub enum Struct_SMBC_internal_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct__SMBCCTX {
    pub debug: ::libc::c_int,
    pub netbios_name: *mut ::libc::c_char,
    pub workgroup: *mut ::libc::c_char,
    pub user: *mut ::libc::c_char,
    pub timeout: ::libc::c_int,
    pub open: smbc_open_fn,
    pub creat: smbc_creat_fn,
    pub read: smbc_read_fn,
    pub write: smbc_write_fn,
    pub unlink: smbc_unlink_fn,
    pub rename: smbc_rename_fn,
    pub lseek: smbc_lseek_fn,
    pub stat: smbc_stat_fn,
    pub fstat: smbc_fstat_fn,
    pub close_fn: smbc_close_fn,
    pub opendir: smbc_opendir_fn,
    pub closedir: smbc_closedir_fn,
    pub readdir: smbc_readdir_fn,
    pub getdents: smbc_getdents_fn,
    pub mkdir: smbc_mkdir_fn,
    pub rmdir: smbc_rmdir_fn,
    pub telldir: smbc_telldir_fn,
    pub lseekdir: smbc_lseekdir_fn,
    pub fstatdir: smbc_fstatdir_fn,
    pub chmod: smbc_chmod_fn,
    pub utimes: smbc_utimes_fn,
    pub setxattr: smbc_setxattr_fn,
    pub getxattr: smbc_getxattr_fn,
    pub removexattr: smbc_removexattr_fn,
    pub listxattr: smbc_listxattr_fn,
    pub print_file: smbc_print_file_fn,
    pub open_print_job: smbc_open_print_job_fn,
    pub list_print_jobs: smbc_list_print_jobs_fn,
    pub unlink_print_job: smbc_unlink_print_job_fn,
    pub callbacks: Struct__smbc_callbacks,
    pub reserved: *mut ::libc::c_void,
    pub flags: ::libc::c_int,
    pub options: Struct__smbc_options,
    pub internal: *mut Struct_SMBC_internal_data,
}
impl ::std::clone::Clone for Struct__SMBCCTX {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__SMBCCTX {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__smbc_callbacks {
    pub auth_fn: smbc_get_auth_data_fn,
    pub check_server_fn: smbc_check_server_fn,
    pub remove_unused_server_fn: smbc_remove_unused_server_fn,
    pub add_cached_srv_fn: smbc_add_cached_srv_fn,
    pub get_cached_srv_fn: smbc_get_cached_srv_fn,
    pub remove_cached_srv_fn: smbc_remove_cached_srv_fn,
    pub purge_cached_fn: smbc_purge_cached_fn,
}
impl ::std::clone::Clone for Struct__smbc_callbacks {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__smbc_callbacks {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__smbc_options {
    pub browse_max_lmb_count: ::libc::c_int,
    pub urlencode_readdir_entries: ::libc::c_int,
    pub one_share_per_server: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__smbc_options {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__smbc_options {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "smbclient")]
extern "C" {
    pub fn smbc_getDebug(c: *mut SMBCCTX) -> ::libc::c_int;
    pub fn smbc_setDebug(c: *mut SMBCCTX, debug: ::libc::c_int) -> ();
    pub fn smbc_getNetbiosName(c: *mut SMBCCTX) -> *mut ::libc::c_char;
    pub fn smbc_setNetbiosName(c: *mut SMBCCTX,
                               netbios_name: *mut ::libc::c_char) -> ();
    pub fn smbc_getWorkgroup(c: *mut SMBCCTX) -> *mut ::libc::c_char;
    pub fn smbc_setWorkgroup(c: *mut SMBCCTX, workgroup: *mut ::libc::c_char)
     -> ();
    pub fn smbc_getUser(c: *mut SMBCCTX) -> *mut ::libc::c_char;
    pub fn smbc_setUser(c: *mut SMBCCTX, user: *mut ::libc::c_char) -> ();
    pub fn smbc_getTimeout(c: *mut SMBCCTX) -> ::libc::c_int;
    pub fn smbc_setTimeout(c: *mut SMBCCTX, timeout: ::libc::c_int) -> ();
    pub fn smbc_getOptionDebugToStderr(c: *mut SMBCCTX) -> smbc_bool;
    pub fn smbc_setOptionDebugToStderr(c: *mut SMBCCTX, b: smbc_bool) -> ();
    pub fn smbc_getOptionFullTimeNames(c: *mut SMBCCTX) -> smbc_bool;
    pub fn smbc_setOptionFullTimeNames(c: *mut SMBCCTX, b: smbc_bool) -> ();
    pub fn smbc_getOptionOpenShareMode(c: *mut SMBCCTX) -> smbc_share_mode;
    pub fn smbc_setOptionOpenShareMode(c: *mut SMBCCTX,
                                       share_mode: smbc_share_mode) -> ();
    pub fn smbc_getOptionUserData(c: *mut SMBCCTX) -> *mut ::libc::c_void;
    pub fn smbc_setOptionUserData(c: *mut SMBCCTX,
                                  user_data: *mut ::libc::c_void) -> ();
    pub fn smbc_getOptionSmbEncryptionLevel(c: *mut SMBCCTX)
     -> smbc_smb_encrypt_level;
    pub fn smbc_setOptionSmbEncryptionLevel(c: *mut SMBCCTX,
                                            level: smbc_smb_encrypt_level)
     -> ();
    pub fn smbc_getOptionCaseSensitive(c: *mut SMBCCTX) -> smbc_bool;
    pub fn smbc_setOptionCaseSensitive(c: *mut SMBCCTX, b: smbc_bool) -> ();
    pub fn smbc_getOptionBrowseMaxLmbCount(c: *mut SMBCCTX) -> ::libc::c_int;
    pub fn smbc_setOptionBrowseMaxLmbCount(c: *mut SMBCCTX,
                                           count: ::libc::c_int) -> ();
    pub fn smbc_getOptionUrlEncodeReaddirEntries(c: *mut SMBCCTX)
     -> smbc_bool;
    pub fn smbc_setOptionUrlEncodeReaddirEntries(c: *mut SMBCCTX,
                                                 b: smbc_bool) -> ();
    pub fn smbc_getOptionOneSharePerServer(c: *mut SMBCCTX) -> smbc_bool;
    pub fn smbc_setOptionOneSharePerServer(c: *mut SMBCCTX, b: smbc_bool)
     -> ();
    pub fn smbc_getOptionUseKerberos(c: *mut SMBCCTX) -> smbc_bool;
    pub fn smbc_setOptionUseKerberos(c: *mut SMBCCTX, b: smbc_bool) -> ();
    pub fn smbc_getOptionFallbackAfterKerberos(c: *mut SMBCCTX) -> smbc_bool;
    pub fn smbc_setOptionFallbackAfterKerberos(c: *mut SMBCCTX, b: smbc_bool)
     -> ();
    pub fn smbc_getOptionNoAutoAnonymousLogin(c: *mut SMBCCTX) -> smbc_bool;
    pub fn smbc_setOptionNoAutoAnonymousLogin(c: *mut SMBCCTX, b: smbc_bool)
     -> ();
    pub fn smbc_getOptionUseCCache(c: *mut SMBCCTX) -> smbc_bool;
    pub fn smbc_setOptionUseCCache(c: *mut SMBCCTX, b: smbc_bool) -> ();
    pub fn smbc_getFunctionAuthData(c: *mut SMBCCTX) -> smbc_get_auth_data_fn;
    pub fn smbc_setFunctionAuthData(c: *mut SMBCCTX,
                                    _fn: smbc_get_auth_data_fn) -> ();
    pub fn smbc_getFunctionAuthDataWithContext(c: *mut SMBCCTX)
     -> smbc_get_auth_data_with_context_fn;
    pub fn smbc_setFunctionAuthDataWithContext(c: *mut SMBCCTX,
                                               _fn:
                                                   smbc_get_auth_data_with_context_fn)
     -> ();
    pub fn smbc_getFunctionCheckServer(c: *mut SMBCCTX)
     -> smbc_check_server_fn;
    pub fn smbc_setFunctionCheckServer(c: *mut SMBCCTX,
                                       _fn: smbc_check_server_fn) -> ();
    pub fn smbc_getFunctionRemoveUnusedServer(c: *mut SMBCCTX)
     -> smbc_remove_unused_server_fn;
    pub fn smbc_setFunctionRemoveUnusedServer(c: *mut SMBCCTX,
                                              _fn:
                                                  smbc_remove_unused_server_fn)
     -> ();
    pub fn smbc_getFunctionAddCachedServer(c: *mut SMBCCTX)
     -> smbc_add_cached_srv_fn;
    pub fn smbc_setFunctionAddCachedServer(c: *mut SMBCCTX,
                                           _fn: smbc_add_cached_srv_fn) -> ();
    pub fn smbc_getFunctionGetCachedServer(c: *mut SMBCCTX)
     -> smbc_get_cached_srv_fn;
    pub fn smbc_setFunctionGetCachedServer(c: *mut SMBCCTX,
                                           _fn: smbc_get_cached_srv_fn) -> ();
    pub fn smbc_getFunctionRemoveCachedServer(c: *mut SMBCCTX)
     -> smbc_remove_cached_srv_fn;
    pub fn smbc_setFunctionRemoveCachedServer(c: *mut SMBCCTX,
                                              _fn: smbc_remove_cached_srv_fn)
     -> ();
    pub fn smbc_getFunctionPurgeCachedServers(c: *mut SMBCCTX)
     -> smbc_purge_cached_fn;
    pub fn smbc_setFunctionPurgeCachedServers(c: *mut SMBCCTX,
                                              _fn: smbc_purge_cached_fn)
     -> ();
    pub fn smbc_getServerCacheData(c: *mut SMBCCTX)
     -> *mut Struct_smbc_server_cache;
    pub fn smbc_setServerCacheData(c: *mut SMBCCTX,
                                   cache: *mut Struct_smbc_server_cache)
     -> ();
    pub fn smbc_getFunctionOpen(c: *mut SMBCCTX) -> smbc_open_fn;
    pub fn smbc_setFunctionOpen(c: *mut SMBCCTX, _fn: smbc_open_fn) -> ();
    pub fn smbc_getFunctionCreat(c: *mut SMBCCTX) -> smbc_creat_fn;
    pub fn smbc_setFunctionCreat(c: *mut SMBCCTX, arg1: smbc_creat_fn) -> ();
    pub fn smbc_getFunctionRead(c: *mut SMBCCTX) -> smbc_read_fn;
    pub fn smbc_setFunctionRead(c: *mut SMBCCTX, _fn: smbc_read_fn) -> ();
    pub fn smbc_getFunctionWrite(c: *mut SMBCCTX) -> smbc_write_fn;
    pub fn smbc_setFunctionWrite(c: *mut SMBCCTX, _fn: smbc_write_fn) -> ();
    pub fn smbc_getFunctionUnlink(c: *mut SMBCCTX) -> smbc_unlink_fn;
    pub fn smbc_setFunctionUnlink(c: *mut SMBCCTX, _fn: smbc_unlink_fn) -> ();
    pub fn smbc_getFunctionRename(c: *mut SMBCCTX) -> smbc_rename_fn;
    pub fn smbc_setFunctionRename(c: *mut SMBCCTX, _fn: smbc_rename_fn) -> ();
    pub fn smbc_getFunctionLseek(c: *mut SMBCCTX) -> smbc_lseek_fn;
    pub fn smbc_setFunctionLseek(c: *mut SMBCCTX, _fn: smbc_lseek_fn) -> ();
    pub fn smbc_getFunctionStat(c: *mut SMBCCTX) -> smbc_stat_fn;
    pub fn smbc_setFunctionStat(c: *mut SMBCCTX, _fn: smbc_stat_fn) -> ();
    pub fn smbc_getFunctionFstat(c: *mut SMBCCTX) -> smbc_fstat_fn;
    pub fn smbc_setFunctionFstat(c: *mut SMBCCTX, _fn: smbc_fstat_fn) -> ();
    pub fn smbc_getFunctionStatVFS(c: *mut SMBCCTX) -> smbc_statvfs_fn;
    pub fn smbc_setFunctionStatVFS(c: *mut SMBCCTX, _fn: smbc_statvfs_fn)
     -> ();
    pub fn smbc_getFunctionFstatVFS(c: *mut SMBCCTX) -> smbc_fstatvfs_fn;
    pub fn smbc_setFunctionFstatVFS(c: *mut SMBCCTX, _fn: smbc_fstatvfs_fn)
     -> ();
    pub fn smbc_getFunctionFtruncate(c: *mut SMBCCTX) -> smbc_ftruncate_fn;
    pub fn smbc_setFunctionFtruncate(c: *mut SMBCCTX, _fn: smbc_ftruncate_fn)
     -> ();
    pub fn smbc_getFunctionClose(c: *mut SMBCCTX) -> smbc_close_fn;
    pub fn smbc_setFunctionClose(c: *mut SMBCCTX, _fn: smbc_close_fn) -> ();
    pub fn smbc_getFunctionOpendir(c: *mut SMBCCTX) -> smbc_opendir_fn;
    pub fn smbc_setFunctionOpendir(c: *mut SMBCCTX, _fn: smbc_opendir_fn)
     -> ();
    pub fn smbc_getFunctionClosedir(c: *mut SMBCCTX) -> smbc_closedir_fn;
    pub fn smbc_setFunctionClosedir(c: *mut SMBCCTX, _fn: smbc_closedir_fn)
     -> ();
    pub fn smbc_getFunctionReaddir(c: *mut SMBCCTX) -> smbc_readdir_fn;
    pub fn smbc_setFunctionReaddir(c: *mut SMBCCTX, _fn: smbc_readdir_fn)
     -> ();
    pub fn smbc_getFunctionGetdents(c: *mut SMBCCTX) -> smbc_getdents_fn;
    pub fn smbc_setFunctionGetdents(c: *mut SMBCCTX, _fn: smbc_getdents_fn)
     -> ();
    pub fn smbc_getFunctionMkdir(c: *mut SMBCCTX) -> smbc_mkdir_fn;
    pub fn smbc_setFunctionMkdir(c: *mut SMBCCTX, _fn: smbc_mkdir_fn) -> ();
    pub fn smbc_getFunctionRmdir(c: *mut SMBCCTX) -> smbc_rmdir_fn;
    pub fn smbc_setFunctionRmdir(c: *mut SMBCCTX, _fn: smbc_rmdir_fn) -> ();
    pub fn smbc_getFunctionTelldir(c: *mut SMBCCTX) -> smbc_telldir_fn;
    pub fn smbc_setFunctionTelldir(c: *mut SMBCCTX, _fn: smbc_telldir_fn)
     -> ();
    pub fn smbc_getFunctionLseekdir(c: *mut SMBCCTX) -> smbc_lseekdir_fn;
    pub fn smbc_setFunctionLseekdir(c: *mut SMBCCTX, _fn: smbc_lseekdir_fn)
     -> ();
    pub fn smbc_getFunctionFstatdir(c: *mut SMBCCTX) -> smbc_fstatdir_fn;
    pub fn smbc_setFunctionFstatdir(c: *mut SMBCCTX, _fn: smbc_fstatdir_fn)
     -> ();
    pub fn smbc_getFunctionChmod(c: *mut SMBCCTX) -> smbc_chmod_fn;
    pub fn smbc_setFunctionChmod(c: *mut SMBCCTX, _fn: smbc_chmod_fn) -> ();
    pub fn smbc_getFunctionUtimes(c: *mut SMBCCTX) -> smbc_utimes_fn;
    pub fn smbc_setFunctionUtimes(c: *mut SMBCCTX, _fn: smbc_utimes_fn) -> ();
    pub fn smbc_getFunctionSetxattr(c: *mut SMBCCTX) -> smbc_setxattr_fn;
    pub fn smbc_setFunctionSetxattr(c: *mut SMBCCTX, _fn: smbc_setxattr_fn)
     -> ();
    pub fn smbc_getFunctionGetxattr(c: *mut SMBCCTX) -> smbc_getxattr_fn;
    pub fn smbc_setFunctionGetxattr(c: *mut SMBCCTX, _fn: smbc_getxattr_fn)
     -> ();
    pub fn smbc_getFunctionRemovexattr(c: *mut SMBCCTX)
     -> smbc_removexattr_fn;
    pub fn smbc_setFunctionRemovexattr(c: *mut SMBCCTX,
                                       _fn: smbc_removexattr_fn) -> ();
    pub fn smbc_getFunctionListxattr(c: *mut SMBCCTX) -> smbc_listxattr_fn;
    pub fn smbc_setFunctionListxattr(c: *mut SMBCCTX, _fn: smbc_listxattr_fn)
     -> ();
    pub fn smbc_getFunctionPrintFile(c: *mut SMBCCTX) -> smbc_print_file_fn;
    pub fn smbc_setFunctionPrintFile(c: *mut SMBCCTX, _fn: smbc_print_file_fn)
     -> ();
    pub fn smbc_getFunctionOpenPrintJob(c: *mut SMBCCTX)
     -> smbc_open_print_job_fn;
    pub fn smbc_setFunctionOpenPrintJob(c: *mut SMBCCTX,
                                        _fn: smbc_open_print_job_fn) -> ();
    pub fn smbc_getFunctionListPrintJobs(c: *mut SMBCCTX)
     -> smbc_list_print_jobs_fn;
    pub fn smbc_setFunctionListPrintJobs(c: *mut SMBCCTX,
                                         _fn: smbc_list_print_jobs_fn) -> ();
    pub fn smbc_getFunctionUnlinkPrintJob(c: *mut SMBCCTX)
     -> smbc_unlink_print_job_fn;
    pub fn smbc_setFunctionUnlinkPrintJob(c: *mut SMBCCTX,
                                          _fn: smbc_unlink_print_job_fn)
     -> ();
    pub fn smbc_new_context() -> *mut SMBCCTX;
    pub fn smbc_free_context(context: *mut SMBCCTX,
                             shutdown_ctx: ::libc::c_int) -> ::libc::c_int;
    pub fn smbc_option_set(context: *mut SMBCCTX,
                           option_name: *mut ::libc::c_char, ...) -> ();
    pub fn smbc_option_get(context: *mut SMBCCTX,
                           option_name: *mut ::libc::c_char)
     -> *mut ::libc::c_void;
    pub fn smbc_init_context(context: *mut SMBCCTX) -> *mut SMBCCTX;
    pub fn smbc_init(_fn: smbc_get_auth_data_fn, debug: ::libc::c_int)
     -> ::libc::c_int;
    pub fn smbc_set_context(new_context: *mut SMBCCTX) -> *mut SMBCCTX;
    pub fn smbc_open(furl: *const ::libc::c_char, flags: ::libc::c_int,
                     mode: mode_t) -> ::libc::c_int;
    pub fn smbc_creat(furl: *const ::libc::c_char, mode: mode_t)
     -> ::libc::c_int;
    pub fn smbc_read(fd: ::libc::c_int, buf: *mut ::libc::c_void,
                     bufsize: size_t) -> ssize_t;
    pub fn smbc_write(fd: ::libc::c_int, buf: *const ::libc::c_void,
                      bufsize: size_t) -> ssize_t;
    pub fn smbc_lseek(fd: ::libc::c_int, offset: off_t, whence: ::libc::c_int)
     -> off_t;
    pub fn smbc_close(fd: ::libc::c_int) -> ::libc::c_int;
    pub fn smbc_unlink(furl: *const ::libc::c_char) -> ::libc::c_int;
    pub fn smbc_rename(ourl: *const ::libc::c_char,
                       nurl: *const ::libc::c_char) -> ::libc::c_int;
    pub fn smbc_opendir(durl: *const ::libc::c_char) -> ::libc::c_int;
    pub fn smbc_closedir(dh: ::libc::c_int) -> ::libc::c_int;
    pub fn smbc_getdents(dh: ::libc::c_uint, dirp: *mut Struct_smbc_dirent,
                         count: ::libc::c_int) -> ::libc::c_int;
    pub fn smbc_readdir(dh: ::libc::c_uint) -> *mut Struct_smbc_dirent;
    pub fn smbc_telldir(dh: ::libc::c_int) -> off_t;
    pub fn smbc_lseekdir(fd: ::libc::c_int, offset: off_t) -> ::libc::c_int;
    pub fn smbc_mkdir(durl: *const ::libc::c_char, mode: mode_t)
     -> ::libc::c_int;
    pub fn smbc_rmdir(durl: *const ::libc::c_char) -> ::libc::c_int;
    pub fn smbc_stat(url: *const ::libc::c_char, st: *mut Struct_stat)
     -> ::libc::c_int;
    pub fn smbc_fstat(fd: ::libc::c_int, st: *mut Struct_stat)
     -> ::libc::c_int;
    pub fn smbc_statvfs(url: *mut ::libc::c_char, st: *mut Struct_statvfs)
     -> ::libc::c_int;
    pub fn smbc_fstatvfs(fd: ::libc::c_int, st: *mut Struct_statvfs)
     -> ::libc::c_int;
    pub fn smbc_ftruncate(fd: ::libc::c_int, size: off_t) -> ::libc::c_int;
    pub fn smbc_chmod(url: *const ::libc::c_char, mode: mode_t)
     -> ::libc::c_int;
    pub fn smbc_utimes(url: *const ::libc::c_char, tbuf: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn smbc_setxattr(url: *const ::libc::c_char,
                         name: *const ::libc::c_char,
                         value: *const ::libc::c_void, size: size_t,
                         flags: ::libc::c_int) -> ::libc::c_int;
    pub fn smbc_lsetxattr(url: *const ::libc::c_char,
                          name: *const ::libc::c_char,
                          value: *const ::libc::c_void, size: size_t,
                          flags: ::libc::c_int) -> ::libc::c_int;
    pub fn smbc_fsetxattr(fd: ::libc::c_int, name: *const ::libc::c_char,
                          value: *const ::libc::c_void, size: size_t,
                          flags: ::libc::c_int) -> ::libc::c_int;
    pub fn smbc_getxattr(url: *const ::libc::c_char,
                         name: *const ::libc::c_char,
                         value: *const ::libc::c_void, size: size_t)
     -> ::libc::c_int;
    pub fn smbc_lgetxattr(url: *const ::libc::c_char,
                          name: *const ::libc::c_char,
                          value: *const ::libc::c_void, size: size_t)
     -> ::libc::c_int;
    pub fn smbc_fgetxattr(fd: ::libc::c_int, name: *const ::libc::c_char,
                          value: *const ::libc::c_void, size: size_t)
     -> ::libc::c_int;
    pub fn smbc_removexattr(url: *const ::libc::c_char,
                            name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn smbc_lremovexattr(url: *const ::libc::c_char,
                             name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn smbc_fremovexattr(fd: ::libc::c_int, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn smbc_listxattr(url: *const ::libc::c_char,
                          list: *mut ::libc::c_char, size: size_t)
     -> ::libc::c_int;
    pub fn smbc_llistxattr(url: *const ::libc::c_char,
                           list: *mut ::libc::c_char, size: size_t)
     -> ::libc::c_int;
    pub fn smbc_flistxattr(fd: ::libc::c_int, list: *mut ::libc::c_char,
                           size: size_t) -> ::libc::c_int;
    pub fn smbc_print_file(fname: *const ::libc::c_char,
                           printq: *const ::libc::c_char) -> ::libc::c_int;
    pub fn smbc_open_print_job(fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn smbc_list_print_jobs(purl: *const ::libc::c_char,
                                _fn: smbc_list_print_job_fn) -> ::libc::c_int;
    pub fn smbc_unlink_print_job(purl: *const ::libc::c_char,
                                 id: ::libc::c_int) -> ::libc::c_int;
    pub fn smbc_remove_unused_server(context: *mut SMBCCTX, srv: *mut SMBCSRV)
     -> ::libc::c_int;
    pub fn smbc_urldecode(dest: *mut ::libc::c_char, src: *mut ::libc::c_char,
                          max_dest_len: size_t) -> ::libc::c_int;
    pub fn smbc_urlencode(dest: *mut ::libc::c_char, src: *mut ::libc::c_char,
                          max_dest_len: ::libc::c_int) -> ::libc::c_int;
    pub fn smbc_version() -> *const ::libc::c_char;
    pub fn smbc_set_credentials(workgroup: *const ::libc::c_char,
                                user: *const ::libc::c_char,
                                password: *const ::libc::c_char,
                                use_kerberos: smbc_bool,
                                signing_state: *const ::libc::c_char) -> ();
    pub fn smbc_set_credentials_with_fallback(ctx: *mut SMBCCTX,
                                              workgroup:
                                                  *const ::libc::c_char,
                                              user: *const ::libc::c_char,
                                              password: *const ::libc::c_char)
     -> ();
    pub fn smbc_thread_posix() -> ();
    pub fn smbc_thread_impl(create_mutex:
                                ::std::option::Option<extern "C" fn(lockname:
                                                                        *const ::libc::c_char,
                                                                    pplock:
                                                                        *mut *mut ::libc::c_void,
                                                                    location:
                                                                        *const ::libc::c_char)
                                                          -> ::libc::c_int>,
                            destroy_mutex:
                                ::std::option::Option<extern "C" fn(plock:
                                                                        *mut ::libc::c_void,
                                                                    location:
                                                                        *const ::libc::c_char)
                                                          -> ()>,
                            lock_mutex:
                                ::std::option::Option<extern "C" fn(plock:
                                                                        *mut ::libc::c_void,
                                                                    lock_type:
                                                                        ::libc::c_int,
                                                                    location:
                                                                        *const ::libc::c_char)
                                                          -> ::libc::c_int>,
                            create_tls:
                                ::std::option::Option<extern "C" fn(keyname:
                                                                        *const ::libc::c_char,
                                                                    ppkey:
                                                                        *mut *mut ::libc::c_void,
                                                                    location:
                                                                        *const ::libc::c_char)
                                                          -> ::libc::c_int>,
                            destroy_tls:
                                ::std::option::Option<extern "C" fn(ppkey:
                                                                        *mut *mut ::libc::c_void,
                                                                    location:
                                                                        *const ::libc::c_char)
                                                          -> ()>,
                            set_tls:
                                ::std::option::Option<extern "C" fn(pkey:
                                                                        *mut ::libc::c_void,
                                                                    pval:
                                                                        *const ::libc::c_void,
                                                                    location:
                                                                        *const ::libc::c_char)
                                                          -> ::libc::c_int>,
                            get_tls:
                                ::std::option::Option<extern "C" fn(pkey:
                                                                        *mut ::libc::c_void,
                                                                    location:
                                                                        *const ::libc::c_char)
                                                          ->
                                                              *mut ::libc::c_void>)
     -> ();
}
